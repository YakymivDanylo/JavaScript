// –ì–æ–ª–æ–≤–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö
const products = new Map(); // ID ‚Üí {name, price, stock}
const orders = new Set(); // –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
const productHistory = new WeakMap(); // –Ü—Å—Ç–æ—Ä—ñ—è –∑–º—ñ–Ω
const users = new WeakSet(); // –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ ID
const generateId = () => Math.random().toString(36).substr(2, 9);

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É
function addProduct(name, price, stock) {
    const id = generateId();
    const product = { name, price, stock };

    products.set(id, product);
    productHistory.set(product, [`–ü—Ä–æ–¥—É–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${new Date()}`]);

    console.log(`‚úÖ –î–æ–¥–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç: ${name} (ID: ${id})`);
    return id;
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É –∑–∞ ID
function removeProduct(id) {
    if (products.has(id)) {
        products.delete(id);
        console.log(`‚ùå –ü—Ä–æ–¥—É–∫—Ç –∑ ID ${id} –≤–∏–¥–∞–ª–µ–Ω–æ.`);
    } else {
        console.log(`‚ö† –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!`);
    }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç
function updateProduct(id, newPrice, newStock) {
    if (products.has(id)) {
        let product = products.get(id);
        product.price = newPrice;
        product.stock = newStock;

        productHistory.get(product).push(`–û–Ω–æ–≤–ª–µ–Ω–æ: ${new Date()}`);
        console.log(`üîÑ –ü—Ä–æ–¥—É–∫—Ç ${product.name} –æ–Ω–æ–≤–ª–µ–Ω–æ!`);
    } else {
        console.log(`‚ö† –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!`);
    }
}

// –ü–æ—à—É–∫ –ø—Ä–æ–¥—É–∫—Ç—É –∑–∞ –Ω–∞–∑–≤–æ—é
function findProduct(name) {
    for (let [id, product] of products.entries()) {
        if (product.name.toLowerCase() === name.toLowerCase()) {
            console.log(`üîç –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç:`, product);
            return { id, ...product };
        }
    }
    console.log(`‚ö† –ü—Ä–æ–¥—É–∫—Ç "${name}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
    return null;
}

// –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
function placeOrder(user, productId, quantity) {
    if (!products.has(productId)) {
        console.log(`‚ö† –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
        return;
    }

    let product = products.get(productId);
    if (product.stock < quantity) {
        console.log(`‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ç–æ–≤–∞—Ä—É –Ω–∞ —Å–∫–ª–∞–¥—ñ.`);
        return;
    }

    product.stock -= quantity;
    orders.add({ user, productId, quantity, date: new Date() });
    users.add(user);

    console.log(`üõí –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ: ${user.name} –∫—É–ø–∏–≤(–ª–∞) ${quantity}x ${product.name}.`);
}

// –í–∏–≤–µ–¥–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
function showProducts() {
    console.log("üì¶ –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤:");
    for (let [id, product] of products.entries()) {
        console.log(`ID: ${id}, –ù–∞–∑–≤–∞: ${product.name}, –¶—ñ–Ω–∞: ${product.price} –≥—Ä–Ω, –ù–∞ —Å–∫–ª–∞–¥—ñ: ${product.stock}`);
    }
}

// üõç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏
const user1 = { name: "–Ü–≤–∞–Ω" };
const user2 = { name: "–ú–∞—Ä—ñ—è" };

const id1 = addProduct("–ù–æ—É—Ç–±—É–∫", 25000, 5);
const id2 = addProduct("–°–º–∞—Ä—Ç—Ñ–æ–Ω", 15000, 10);

showProducts();

updateProduct(id1, 23000, 4);
findProduct("–ù–æ—É—Ç–±—É–∫");

placeOrder(user1, id1, 1);
placeOrder(user2, id2, 2);

removeProduct(id1);
showProducts();
